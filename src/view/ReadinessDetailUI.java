/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.util.TreeMap;
import model.Readiness;

/**
 *
 * @author Sarah
 */
public class ReadinessDetailUI extends javax.swing.JFrame
{

    /**
     * Creates new form ReadinessUI
     */
    String currentKey;
    TreeMap<String, Readiness> map;
    String dateIn;
    int hoursSleptIn;
    int daysTrainedIn;
    boolean recoveryIn;
    boolean warmupIn;
    boolean hydrationIn;

    public ReadinessDetailUI(TreeMap<String, Readiness> map)
    {

        initComponents();        
        this.map = map;
        currentKey = map.firstKey();
        setOutput();
    }

    public String getCurrentKey()
    {
        return currentKey;
    }

    public void setCurrentKey(String currentKey)
    {
        this.currentKey = currentKey;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jCheckBox1 = new javax.swing.JCheckBox();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        recoveryChk = new javax.swing.JComboBox<>();
        warmupChk = new javax.swing.JComboBox<>();
        hydrationChk = new javax.swing.JComboBox<>();
        sleepHours = new javax.swing.JComboBox<>();
        daysSinceTrainBox = new javax.swing.JComboBox();
        rdPrevious = new javax.swing.JButton();
        rdUpdate = new javax.swing.JButton();
        rdNext = new javax.swing.JButton();
        rdAdd = new javax.swing.JButton();
        rdDelete = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        dateTxt = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        rdSearchText = new javax.swing.JTextField();
        rdSearchBtn = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        scoreLabe1l = new javax.swing.JLabel();
        scoreResultLabel = new javax.swing.JLabel();
        scoreSummary = new javax.swing.JLabel();
        summaryWarning = new javax.swing.JLabel();

        jCheckBox1.setText("jCheckBox1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("How many hours did you sleep last night?");

        jLabel2.setText("How many days ago did you train the focus muscle group?");

        jLabel3.setText("Did you perform recovery after the last time you worked the focus muscle group?");

        jLabel4.setText("Did you complete a warmup for this workout?");

        jLabel5.setText("Have you hit your hydration goal so far today?");

        recoveryChk.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "No", "Yes" }));

        warmupChk.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "No", "Yes" }));

        hydrationChk.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "No", "Yes" }));

        sleepHours.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "less than 3", "3", "4", "5", "6", "7", "8 or more" }));

        daysSinceTrainBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "0", "1", "2", "3", "4+" }));

        rdPrevious.setText("Previous");
        rdPrevious.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                rdPreviousActionPerformed(evt);
            }
        });

        rdUpdate.setText("Update");
        rdUpdate.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                rdUpdateActionPerformed(evt);
            }
        });

        rdNext.setText("Next");
        rdNext.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                rdNextActionPerformed(evt);
            }
        });

        rdAdd.setText("Add");
        rdAdd.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                rdAddActionPerformed(evt);
            }
        });

        rdDelete.setText("Delete");
        rdDelete.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                rdDeleteActionPerformed(evt);
            }
        });

        jLabel7.setText("Date:");

        dateTxt.setText("YYYY/MM/DD");

        jLabel8.setFont(new java.awt.Font("Tahoma", 2, 10)); // NOI18N
        jLabel8.setText("Search by Date (YYYY/MM/DD):");

        rdSearchBtn.setText("Search");
        rdSearchBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                rdSearchBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(8, 8, 8)
                                        .addComponent(rdPrevious)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(rdNext)
                                        .addGap(114, 114, 114)
                                        .addComponent(rdUpdate)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(rdAdd))
                                    .addComponent(jLabel3))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(34, 34, 34)
                                        .addComponent(rdDelete))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(sleepHours, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(daysSinceTrainBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(recoveryChk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(warmupChk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(hydrationChk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(18, 18, 18)
                                .addComponent(dateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel5)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(216, 216, 216)
                        .addComponent(rdSearchText, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(rdSearchBtn))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(254, 254, 254)
                        .addComponent(jLabel8)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdSearchText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rdSearchBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(dateTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(sleepHours, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(30, 30, 30)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(daysSinceTrainBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(34, 34, 34)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(recoveryChk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(47, 47, 47)
                        .addComponent(jLabel4))
                    .addComponent(warmupChk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(40, 40, 40)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(hydrationChk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 30, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdPrevious)
                    .addComponent(rdUpdate)
                    .addComponent(rdNext)
                    .addComponent(rdAdd)
                    .addComponent(rdDelete))
                .addContainerGap())
        );

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N
        jLabel6.setText("Readiness Assessment");

        scoreLabe1l.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        scoreLabe1l.setText("Your  score is: ");

        scoreResultLabel.setFont(new java.awt.Font("Tahoma", 3, 18)); // NOI18N
        scoreResultLabel.setText(" ");

        scoreSummary.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        scoreSummary.setText(" ");

        summaryWarning.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        summaryWarning.setText(" ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(227, 227, 227)
                                .addComponent(scoreLabe1l)
                                .addGap(18, 18, 18)
                                .addComponent(scoreResultLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(133, 133, 133)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(scoreSummary, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(summaryWarning, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(48, 48, 48)
                .addComponent(jLabel6)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(scoreLabe1l)
                    .addComponent(scoreResultLabel))
                .addGap(18, 18, 18)
                .addComponent(scoreSummary)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(summaryWarning)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(100, 100, 100))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rdSearchBtnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rdSearchBtnActionPerformed
    {//GEN-HEADEREND:event_rdSearchBtnActionPerformed
        String searchKey = rdSearchText.getText();
        if (map.containsKey(searchKey))
        {
            currentKey = searchKey;
            setOutput();
        } else
        {
            System.out.println("Key Not Found");
        }
        setOutput();
    }//GEN-LAST:event_rdSearchBtnActionPerformed

    private void rdDeleteActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rdDeleteActionPerformed
    {//GEN-HEADEREND:event_rdDeleteActionPerformed
        currentKey = dateTxt.getText();
        String lower = map.lowerKey(currentKey);
        if (map.containsKey(currentKey))
        {
            map.remove(currentKey);
        } else
        {
            System.out.println("Key Not Found");
        }
        currentKey = lower;
        setOutput();

    }//GEN-LAST:event_rdDeleteActionPerformed

    private void rdAddActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rdAddActionPerformed
    {//GEN-HEADEREND:event_rdAddActionPerformed
        map.put("YYYY/MM/DD", new Readiness());
        currentKey = "YYYY/MM/DD";
        setOutput();
        // getInput();
        // map.put(currentKey, new Readiness(hoursSleptIn, daysTrainedIn, warmupIn, recoveryIn, hydrationIn, dateIn));
    }//GEN-LAST:event_rdAddActionPerformed

    private void rdNextActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rdNextActionPerformed
    {//GEN-HEADEREND:event_rdNextActionPerformed
        String higher = map.higherKey(currentKey);
        if (higher == null)
        {
            currentKey = map.firstKey();
        }
        else
        {
            currentKey = higher;
        }
        setOutput();
    }//GEN-LAST:event_rdNextActionPerformed

    private void rdUpdateActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rdUpdateActionPerformed
    {//GEN-HEADEREND:event_rdUpdateActionPerformed
        getInput();
        currentKey = dateTxt.getText();
        if (!map.containsKey(currentKey))
        {
            map.put(currentKey, new Readiness());
            if (map.containsKey("YYYY/MM/DD"))
            {
                map.remove("YYYY/MM/DD");
            }

        }
        map.get(currentKey).setDate(dateIn);
        map.get(currentKey).setHoursSlept(hoursSleptIn);
        map.get(currentKey).setHydration(hydrationIn);
        map.get(currentKey).setLastTrained(daysTrainedIn);
        map.get(currentKey).setRecovery(recoveryIn);
        map.get(currentKey).setWarmup(warmupIn);
        map.get(currentKey).setTotalScore(hoursSleptIn, daysTrainedIn, warmupIn, recoveryIn, hydrationIn);
        
        setOutput();
    }//GEN-LAST:event_rdUpdateActionPerformed

    private void rdPreviousActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_rdPreviousActionPerformed
    {//GEN-HEADEREND:event_rdPreviousActionPerformed
        String lower = map.lowerKey(currentKey);
        if (lower == null)
        {
            currentKey = map.lastKey();
        }
        else
        {
            currentKey = lower;
        }
        setOutput();
    }//GEN-LAST:event_rdPreviousActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(ReadinessDetailUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(ReadinessDetailUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(ReadinessDetailUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(ReadinessDetailUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
//        java.awt.EventQueue.invokeLater(new Runnable()
//        {
//            public void run()
//            {
//                this.setVisible(true);
//            }
//        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField dateTxt;
    private javax.swing.JComboBox daysSinceTrainBox;
    private javax.swing.JComboBox<String> hydrationChk;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton rdAdd;
    private javax.swing.JButton rdDelete;
    private javax.swing.JButton rdNext;
    private javax.swing.JButton rdPrevious;
    public javax.swing.JButton rdSearchBtn;
    public javax.swing.JTextField rdSearchText;
    private javax.swing.JButton rdUpdate;
    private javax.swing.JComboBox<String> recoveryChk;
    private javax.swing.JLabel scoreLabe1l;
    private javax.swing.JLabel scoreResultLabel;
    private javax.swing.JLabel scoreSummary;
    private javax.swing.JComboBox<String> sleepHours;
    private javax.swing.JLabel summaryWarning;
    private javax.swing.JComboBox<String> warmupChk;
    // End of variables declaration//GEN-END:variables

    private void getInput()
    {
        currentKey = dateTxt.getText();
        getHoursSleptInput();
        daysTrainedIn = daysSinceTrainBox.getSelectedIndex();
        getRecoveryInput();
        getWarmupInput();
        getHydrationInput();
    }

    private void getHoursSleptInput()
    {
        switch (sleepHours.getSelectedIndex())
        {
            case 0:
                hoursSleptIn = 2;
                break;
            case 1:
                hoursSleptIn = 3;
                break;
            case 2:
                hoursSleptIn = 4;
                break;
            case 3:
                hoursSleptIn = 5;
                break;
            case 4:
                hoursSleptIn = 6;
                break;
            case 5:
                hoursSleptIn = 7;
                break;
            case 6:
                hoursSleptIn = 8;
                break;
            default:
                System.out.println("An error has occurred");
        }
    }

    private void getRecoveryInput()
    {
        if (recoveryChk.getSelectedIndex() == 1)
        {
            recoveryIn = true;
        } else
        {
            recoveryIn = false;
        }
    }

    private void getWarmupInput()
    {
        if (warmupChk.getSelectedIndex() == 1)
        {
            warmupIn = true;
        } else
        {
            warmupIn = false;
        }
    }

    private void getHydrationInput()
    {
        if (hydrationChk.getSelectedIndex() == 1)
        {
            hydrationIn = true;
        } else
        {
            hydrationIn = false;
        }
    }

    private void setOutput()
    {
        dateTxt.setText(currentKey);
        setHoursSleptOutput();
        setDaysSinceOutput();
        setRecoveryOutput();
        setWarmupOutput();
        setHydrationOutput();
        int score = map.get(currentKey).getTotalScore();
        scoreResultLabel.setText(String.valueOf(score));
        setScoreSummaryMessage();
    }

    private void setHoursSleptOutput()
    {
        int hoursSlept = map.get(currentKey).getHoursSlept();
        if (hoursSlept < 3)
        {
            sleepHours.setSelectedIndex(0);
        } else if (hoursSlept >= 8)
        {
            sleepHours.setSelectedIndex(6);
        } else
        {
            sleepHours.setSelectedIndex(hoursSlept - 2);
        }

    }

    private void setDaysSinceOutput()
    {
        int lastTrained = map.get(currentKey).getLastTrained();
        if (lastTrained >= 4)
        {
            daysSinceTrainBox.setSelectedIndex(4);
        } else
        {
            daysSinceTrainBox.setSelectedIndex(lastTrained);
        }
    }

    private void setRecoveryOutput()
    {
        if (map.get(currentKey).isRecovery() == true)
        {
            recoveryChk.setSelectedIndex(1);
        } else
        {
            recoveryChk.setSelectedIndex(0);
        }
    }

    private void setWarmupOutput()
    {
        if (map.get(currentKey).isWarmup() == true)
        {
            warmupChk.setSelectedIndex(1);
        } else
        {
            warmupChk.setSelectedIndex(0);
        }
    }

    private void setHydrationOutput()
    {
        if (map.get(currentKey).isHydration() == true)
        {
            hydrationChk.setSelectedIndex(1);
        } else
        {
            hydrationChk.setSelectedIndex(0);
        }
    }

    private void setScoreSummaryMessage()
    {
        int score = map.get(currentKey).getTotalScore();
        summaryWarning.setText("");
        if (score >84)
        {
            scoreSummary.setText("Great Score! Proceed with training as planned");
        }
        else if (score > 49)
        {
            scoreSummary.setText("Score is not ideal. Consider making minor workout modifications.");
        }
        else
        {
            scoreSummary.setText("Your score indicates your body is not prepared for this workout.");
            summaryWarning.setText("Make modifications or address recovery strategies.");
        }
    }
}
